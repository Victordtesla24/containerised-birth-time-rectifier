name: Deploy Birth Time Rectifier

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  KUBE_CONTEXT: birth-time-rectifier-ctx

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          npm ci
          
      - name: Run tests
        run: |
          python -m pytest tests/
          npm test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      
      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/frontend.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}-frontend
          labels: ${{ steps.meta.outputs.labels }}
          
      - name: Build and push AI Service image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/ai_service.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}-ai
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          
      - name: Validate Kubernetes configuration
        run: |
          # Verify kubeconfig and context
          if ! kubectl config get-contexts "${{ env.KUBE_CONTEXT }}" &>/dev/null; then
            echo "Error: Kubernetes context '${{ env.KUBE_CONTEXT }}' not found"
            kubectl config get-contexts
            exit 1
          fi
          
          # Set the context explicitly
          kubectl config use-context "${{ env.KUBE_CONTEXT }}"
          
          # Verify cluster connection
          if ! kubectl cluster-info &>/dev/null; then
            echo "Error: Unable to connect to Kubernetes cluster"
            exit 1
          fi
          
      - name: Deploy to Kubernetes
        run: |
          # Apply configurations with explicit context
          kubectl --context="${{ env.KUBE_CONTEXT }}" apply -f k8s/
          
          # Restart deployments with explicit context
          kubectl --context="${{ env.KUBE_CONTEXT }}" rollout restart deployment/birth-time-rectifier-frontend
          kubectl --context="${{ env.KUBE_CONTEXT }}" rollout restart deployment/birth-time-rectifier-ai
          
      - name: Verify deployment
        run: |
          # Monitor rollout status with explicit context
          kubectl --context="${{ env.KUBE_CONTEXT }}" rollout status deployment/birth-time-rectifier-frontend
          kubectl --context="${{ env.KUBE_CONTEXT }}" rollout status deployment/birth-time-rectifier-ai
          
      - name: Run integration tests
        run: |
          pip install pytest requests redis
          python -m pytest tests/integration/ 