"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/birth-time-rectifier",{

/***/ "./src/services/geocoding.ts":
/*!***********************************!*\
  !*** ./src/services/geocoding.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   geocodeBirthPlace: () => (/* binding */ geocodeBirthPlace)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n/**\n * Geocoding service to get coordinates from a location string\n */ \n// Simple logger to avoid direct console statements\nconst logger = {\n    log: function(message) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        // Can be replaced with a proper logging library in production\n        if (true) {\n            // eslint-disable-next-line no-console\n            console.log(message, ...args);\n        }\n    },\n    warn: function(message) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        // eslint-disable-next-line no-console\n        console.warn(message, ...args);\n    },\n    error: function(message) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        // eslint-disable-next-line no-console\n        console.error(message, ...args);\n    }\n};\n/**\n * Geocode a birthplace to get its coordinates and timezone\n * Uses a real geocoding API with fallback to mock data\n *\n * @param location Location string (e.g., \"New York, USA\")\n * @returns Promise with geocoding result\n */ async function geocodeBirthPlace(location) {\n    try {\n        logger.log(\"Geocoding birth location: \".concat(location));\n        // Check if we can use the backend API\n        const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"\".concat(apiUrl, \"/api/geocode\"), {\n                place: location\n            }, {\n                timeout: 10000 // 10 second timeout\n            });\n            if (response.data) {\n                logger.log('Geocoding API response:', response.data);\n                return {\n                    latitude: response.data.latitude,\n                    longitude: response.data.longitude,\n                    timezone: response.data.timezone\n                };\n            }\n        } catch (apiError) {\n            logger.warn('Error calling geocoding API. Using fallback:', apiError);\n        // Continue with fallback if API fails\n        }\n        // Fallback to mock geocoding for common cities\n        const fallbackResult = fallbackGeocode(location);\n        if (fallbackResult) {\n            logger.log('Using fallback geocoding result:', fallbackResult);\n            return fallbackResult;\n        }\n        // If no fallback found, return default coordinates\n        logger.warn('No geocoding result found, using default coordinates');\n        return {\n            latitude: 0,\n            longitude: 0,\n            timezone: 'UTC'\n        };\n    } catch (error) {\n        logger.error('Error in geocodeBirthPlace:', error);\n        // Return default coordinates rather than throwing\n        return {\n            latitude: 0,\n            longitude: 0,\n            timezone: 'UTC'\n        };\n    }\n}\n/**\n * Fallback geocoding function that uses a predefined list of cities\n *\n * @param location Location string\n * @returns Geocoding result or null if not found\n */ const fallbackGeocode = (location)=>{\n    // Example mock coordinates for common cities\n    const geocodeMap = {\n        'new york': {\n            lat: 40.7128,\n            lng: -74.0060,\n            timezone: 'America/New_York'\n        },\n        'london': {\n            lat: 51.5074,\n            lng: -0.1278,\n            timezone: 'Europe/London'\n        },\n        'tokyo': {\n            lat: 35.6762,\n            lng: 139.6503,\n            timezone: 'Asia/Tokyo'\n        },\n        'sydney': {\n            lat: -33.8688,\n            lng: 151.2093,\n            timezone: 'Australia/Sydney'\n        },\n        'pune': {\n            lat: 18.5204,\n            lng: 73.8567,\n            timezone: 'Asia/Kolkata'\n        },\n        'paris': {\n            lat: 48.8566,\n            lng: 2.3522,\n            timezone: 'Europe/Paris'\n        },\n        'berlin': {\n            lat: 52.5200,\n            lng: 13.4050,\n            timezone: 'Europe/Berlin'\n        },\n        'delhi': {\n            lat: 28.6139,\n            lng: 77.2090,\n            timezone: 'Asia/Kolkata'\n        },\n        'mumbai': {\n            lat: 19.0760,\n            lng: 72.8777,\n            timezone: 'Asia/Kolkata'\n        },\n        'bangalore': {\n            lat: 12.9716,\n            lng: 77.5946,\n            timezone: 'Asia/Kolkata'\n        },\n        'los angeles': {\n            lat: 34.0522,\n            lng: -118.2437,\n            timezone: 'America/Los_Angeles'\n        },\n        'chicago': {\n            lat: 41.8781,\n            lng: -87.6298,\n            timezone: 'America/Chicago'\n        },\n        'moscow': {\n            lat: 55.7558,\n            lng: 37.6173,\n            timezone: 'Europe/Moscow'\n        },\n        'beijing': {\n            lat: 39.9042,\n            lng: 116.4074,\n            timezone: 'Asia/Shanghai'\n        },\n        'cairo': {\n            lat: 30.0444,\n            lng: 31.2357,\n            timezone: 'Africa/Cairo'\n        },\n        'rio de janeiro': {\n            lat: -22.9068,\n            lng: -43.1729,\n            timezone: 'America/Sao_Paulo'\n        },\n        'toronto': {\n            lat: 43.6532,\n            lng: -79.3832,\n            timezone: 'America/Toronto'\n        },\n        'rome': {\n            lat: 41.9028,\n            lng: 12.4964,\n            timezone: 'Europe/Rome'\n        },\n        'madrid': {\n            lat: 40.4168,\n            lng: -3.7038,\n            timezone: 'Europe/Madrid'\n        },\n        'singapore': {\n            lat: 1.3521,\n            lng: 103.8198,\n            timezone: 'Asia/Singapore'\n        }\n    };\n    // Check if we have mock data for this location (case insensitive partial match)\n    const locationLower = location.toLowerCase();\n    const matchedCity = Object.keys(geocodeMap).find((city)=>locationLower.includes(city));\n    if (matchedCity) {\n        return {\n            latitude: geocodeMap[matchedCity].lat,\n            longitude: geocodeMap[matchedCity].lng,\n            timezone: geocodeMap[matchedCity].timezone\n        };\n    }\n    return null;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/services/geocoding.ts\n"));

/***/ })

});